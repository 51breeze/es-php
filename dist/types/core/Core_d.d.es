// Start of Core v.5.3.6-13ubuntu3.2

/**
 * Fatal run-time errors. These indicate errors that can not be
 * recovered from, such as a memory allocation problem.
 * Execution of the script is halted.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_ERROR= 1;

/**
 * Catchable fatal error. It indicates that a probably dangerous error
 * occurred, but did not leave the Engine in an unstable state. If the error
 * is not caught by a user defined handle (see also
 * <b>set_error_handler</b>), the application aborts as it
 * was an <b>E_ERROR</b>.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_RECOVERABLE_ERROR= 4096;

/**
 * Run-time warnings (non-fatal errors). Execution of the script is not
 * halted.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_WARNING= 2;

/**
 * Compile-time parse errors. Parse errors should only be generated by
 * the parser.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_PARSE= 4;

/**
 * Run-time notices. Indicate that the script encountered something that
 * could indicate an error, but could also happen in the normal course of
 * running a script.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_NOTICE= 8;

/**
 * Enable to have PHP suggest changes
 * to your code which will ensure the best interoperability
 * and forward compatibility of your code.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_STRICT= 2048;

/**
 * Run-time notices. Enable this to receive warnings about code
 * that will not work in future versions.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_DEPRECATED= 8192;

/**
 * Fatal errors that occur during PHP's initial startup. This is like an
 * <b>E_ERROR</b>, except it is generated by the core of PHP.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_CORE_ERROR= 16;

/**
 * Warnings (non-fatal errors) that occur during PHP's initial startup.
 * This is like an <b>E_WARNING</b>, except it is generated
 * by the core of PHP.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_CORE_WARNING= 32;

/**
 * Fatal compile-time errors. This is like an <b>E_ERROR</b>,
 * except it is generated by the Zend Scripting Engine.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_COMPILE_ERROR= 64;

/**
 * Compile-time warnings (non-fatal errors). This is like an
 * <b>E_WARNING</b>, except it is generated by the Zend
 * Scripting Engine.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_COMPILE_WARNING= 128;

/**
 * User-generated error message. This is like an
 * <b>E_ERROR</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_USER_ERROR= 256;

/**
 * User-generated warning message. This is like an
 * <b>E_WARNING</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_USER_WARNING= 512;

/**
 * User-generated notice message. This is like an
 * <b>E_NOTICE</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_USER_NOTICE= 1024;

/**
 * User-generated warning message. This is like an
 * <b>E_DEPRECATED</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_USER_DEPRECATED= 16384;

/**
 * All errors and warnings, as supported, except of level
 * <b>E_STRICT</b> prior to PHP 5.4.0.
 * Value of <b>E_ALL</b> is 32767 since PHP 5.4.x,
 * 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously
 * @link https://php.net/manual/en/errorfunc.constants.php
 */
declare const E_ALL= 32767;
declare const DEBUG_BACKTRACE_PROVIDE_OBJECT= 1;
declare const DEBUG_BACKTRACE_IGNORE_ARGS= 2;
declare const S_MEMORY= 1;
declare const S_VARS= 4;
declare const S_FILES= 8;
declare const S_INCLUDE= 16;
declare const S_SQL= 32;
declare const S_EXECUTOR= 64;
declare const S_MAIL= 128;
declare const S_SESSION= 256;
declare const S_MISC= 2;
declare const S_INTERNAL= 536870912;
declare const S_ALL= 511;
declare const ZEND_THREAD_SAFE= false;
declare const ZEND_DEBUG_BUILD= false;
declare const PHP_WINDOWS_VERSION_BUILD= 0;
declare const PHP_WINDOWS_VERSION_MAJOR= 0;
declare const PHP_WINDOWS_VERSION_MINOR= 0;
declare const PHP_WINDOWS_VERSION_PLATFORM= 0;
declare const PHP_WINDOWS_VERSION_PRODUCTTYPE= 0;
declare const PHP_WINDOWS_VERSION_SP_MAJOR= 0;
declare const PHP_WINDOWS_VERSION_SP_MINOR= 0;
declare const PHP_WINDOWS_VERSION_SUITEMASK= 0;
declare const PHP_WINDOWS_NT_DOMAIN_CONTROLLER= 2;
declare const PHP_WINDOWS_NT_SERVER= 3;
declare const PHP_WINDOWS_NT_WORKSTATION= 1;
/**
 * @since 7.4
 */
declare const PHP_WINDOWS_EVENT_CTRL_C= 0;
/**
 * @since 7.4
 */
declare const PHP_WINDOWS_EVENT_CTRL_BREAK= 1;
declare const PHP_VERSION= "";
declare const PHP_MAJOR_VERSION= 5;
declare const PHP_MINOR_VERSION= 3;
declare const PHP_RELEASE_VERSION= 6;
declare const PHP_EXTRA_VERSION= "";
declare const PHP_VERSION_ID= 50306;
declare const PHP_ZTS= 0;
declare const PHP_DEBUG= 0;
declare const PHP_OS= "";
/**
 * The operating system family PHP was built for. Either of 'Windows', 'BSD', 'Darwin', 'Solaris', 'Linux' or 'Unknown'. Available as of PHP 7.2.0.
 * @since 7.2
 */
declare const PHP_OS_FAMILY= "";
declare const PHP_SAPI= "cli";
/**
 * @since 7.4
 */
declare const PHP_CLI_PROCESS_TITLE= 1;
declare const DEFAULT_INCLUDE_PATH:string;
declare const PEAR_INSTALL_DIR:string;
declare const PEAR_EXTENSION_DIR:string;
declare const PHP_EXTENSION_DIR:string;
/**
 * Specifies where the binaries were installed into.
 * @link https://php.net/manual/en/reserved.constants.php
 */
declare const PHP_BINARY:string;
declare const PHP_PREFIX:string;
declare const PHP_BINDIR:string;
declare const PHP_LIBDIR:string;
declare const PHP_DATADIR:string;
declare const PHP_SYSCONFDIR:string;
declare const PHP_LOCALSTATEDIR:string;
declare const PHP_CONFIG_FILE_PATH:string;
declare const PHP_CONFIG_FILE_SCAN_DIR:string;
declare const PHP_SHLIB_SUFFIX:string;
declare const PHP_EOL:string;
declare const SUHOSIN_PATCH= 1;
declare const SUHOSIN_PATCH_VERSION:string;
declare const PHP_MAXPATHLEN= 4096;
declare const PHP_INT_MAX= 9223372036854775807;
declare const PHP_INT_MIN= -9223372036854775808;
declare const PHP_INT_SIZE= 8;
/**
 * Number of decimal digits that can be rounded into a float and back without precision loss. Available as of PHP 7.2.0.
 * @since 7.2
 */
declare const PHP_FLOAT_DIG= 15;
/**
 * Smallest representable positive number x, so that x + 1.0 != 1.0. Available as of PHP 7.2.0.
 * @since 7.2
 */
declare const PHP_FLOAT_EPSILON= 2.2204460492503e-16;

/**
 * Largest representable floating point number. Available as of PHP 7.2.0.
 * @since 7.2
 */
declare const PHP_FLOAT_MAX= 1.7976931348623e+308;
/**
 * Smallest representable floating point number. Available as of PHP 7.2.0.
 * @since 7.2
 */
declare const PHP_FLOAT_MIN:number;
declare const ZEND_MULTIBYTE= 0;
declare const PHP_OUTPUT_HANDLER_START= 1;
declare const PHP_OUTPUT_HANDLER_CONT= 2;
declare const PHP_OUTPUT_HANDLER_END= 4;
declare const UPLOAD_ERR_OK= 0;
declare const UPLOAD_ERR_INI_SIZE= 1;
declare const UPLOAD_ERR_FORM_SIZE= 2;
declare const UPLOAD_ERR_PARTIAL= 3;
declare const UPLOAD_ERR_NO_FILE= 4;
declare const UPLOAD_ERR_NO_TMP_DIR= 6;
declare const UPLOAD_ERR_CANT_WRITE= 7;
declare const UPLOAD_ERR_EXTENSION= 8;
declare const STDIN:any;
declare const STDOUT:any;
declare const STDERR:any;
declare const PHP_FD_SETSIZE= 1024;

/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_WRITE= 0;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_FLUSH= 4;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_CLEAN= 2;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_FINAL= 8;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_CLEANABLE= 16;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_FLUSHABLE= 32;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_REMOVABLE= 64;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_STDFLAGS= 112;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_STARTED= 4096;
/** @link https://php.net/manual/en/outcontrol.constants.php */
declare const PHP_OUTPUT_HANDLER_DISABLED= 8192;
